>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> print(matrix_divided([[6,9]], 2))
[[3.0, 4.50]]
>>> print(matrix_divided([[2,4]], True))
[[2.0, 4.0]]
>>> print(matrix_divided([[2,4]], -2))
[[-1.0, -2.0]]
>>> print(matrix_divided([[2,4.0]], 2))
[[1.0, 2.0]]
>>> print(matrix_divided([[2,4]], 2.0))
[[1.0, 2.0]]
>>> print(matrix_divided([[4,6]], float('inf')))
[[0.0, 0.0]]
>>> print(matrix_divided([[4,6]], float('NaN')))
[[nan, nan]]

'''
Traceback Error
'''

>>> print(matrix_divided([[2,4]], 0))
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

>>> print(matrix_divided([[2,4]], '0'))
Traceback (most recent call last):
...
TypeError: div must be a number

>>> print(matrix_divided([[2,4]], None))
Traceback (most recent call last):
...
TypeError: div must be a number

>>> print(matrix_divided([[2,'4']], 2))
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> print(matrix_divided([[2,4], [1]], 2))
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

>>> print(matrix_divided([[2,4]], False))
Traceback (most recent call last):
...
ZeroDivisionError: division by zero

>>> print(matrix_divided([], 2))
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> print(matrix_divided([[]], 2))
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> print(matrix_divided([[None], [2]], 2))
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

>>> print(matrix_divided([[]]))
Traceback (most recent call last):
...
TypeError: matrix_divided() missing 1 required positional argument: 'div'